
Understand basic idea about svm first 
Algorithm for SVM in python :-

Step 1:- Import the necessary libraries and the given dataset.

Step 2:- Seperate the independent variable (x) and dependent variable (y) 
         from the dataset

Step 3:- Split the dataset into training and test set
         (75% for training and 25% for testing)

Step 4:- Train the SVM model with liner kernel and fit the classifier
         to the training dataset. 

Step 5:- Use the trained classifier to make predictions

Step 6:- Evaluate model performance (accuracy). use confusion matrix.


*the code provided below uses svc(support vector classifier)
there are other svm related functions like svr(support vector regressor)


code for reference :-
# Step 1: Import Libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, accuracy_score

# Step 2: Import Dataset (choose other datasets)
df = pd.read_csv('Wine_Quality_Data.csv')

# Step 3: Extract Independent and Dependent Variables
x = df.drop('quality>=6', axis='columns')  # Dropping 'quality>=6' column
y = df['quality>=6']

# Step 4: Split Dataset into Training and Test Sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)
st_x = StandardScaler()
x_train = st_x.fit_transform(x_train)
x_test = st_x.transform(x_test)

# Step 5: Train SVC Model (Support Vector Classifier)
classifier = SVC(kernel='linear', random_state=0)
classifier.fit(x_train, y_train)

# Step 6: Make Predictions
y_pred = classifier.predict(x_test)

# Step 7: Evaluate Model Performance
# For classification, we'll use confusion matrix and accuracy score
cm = confusion_matrix(y_test, y_pred)
acc = accuracy_score(y_test, y_pred)
print("SVM model accuracy (in %):", acc * 100)


